// Code generated by sqlc. DO NOT EDIT.
// source: event_config.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEventConfig = `-- name: CreateEventConfig :one
INSERT INTO event_config (start_block, contract, chain_id, structure)
VALUES ($1, $2, $3, $4)
RETURNING id, start_block, contract, chain_id, structure, created_at, updated_at
`

type CreateEventConfigParams struct {
	StartBlock sql.NullInt32  `json:"start_block"`
	Contract   sql.NullString `json:"contract"`
	ChainID    sql.NullInt32  `json:"chain_id"`
	Structure  sql.NullString `json:"structure"`
}

func (q *Queries) CreateEventConfig(ctx context.Context, arg CreateEventConfigParams) (EventConfig, error) {
	row := q.db.QueryRowContext(ctx, createEventConfig,
		arg.StartBlock,
		arg.Contract,
		arg.ChainID,
		arg.Structure,
	)
	var i EventConfig
	err := row.Scan(
		&i.ID,
		&i.StartBlock,
		&i.Contract,
		&i.ChainID,
		&i.Structure,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEventConfig = `-- name: DeleteEventConfig :exec
DELETE FROM event_config WHERE id = $1
`

func (q *Queries) DeleteEventConfig(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEventConfig, id)
	return err
}

const getAllEventConfigs = `-- name: GetAllEventConfigs :many
SELECT id, start_block, contract, chain_id, structure, created_at, updated_at FROM event_config
`

func (q *Queries) GetAllEventConfigs(ctx context.Context) ([]EventConfig, error) {
	rows, err := q.db.QueryContext(ctx, getAllEventConfigs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventConfig{}
	for rows.Next() {
		var i EventConfig
		if err := rows.Scan(
			&i.ID,
			&i.StartBlock,
			&i.Contract,
			&i.ChainID,
			&i.Structure,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventConfigByContract = `-- name: GetEventConfigByContract :many
SELECT id, start_block, contract, chain_id, structure, created_at, updated_at FROM event_config WHERE contract = $1
`

func (q *Queries) GetEventConfigByContract(ctx context.Context, contract sql.NullString) ([]EventConfig, error) {
	rows, err := q.db.QueryContext(ctx, getEventConfigByContract, contract)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EventConfig{}
	for rows.Next() {
		var i EventConfig
		if err := rows.Scan(
			&i.ID,
			&i.StartBlock,
			&i.Contract,
			&i.ChainID,
			&i.Structure,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventConfigByID = `-- name: GetEventConfigByID :one
SELECT id, start_block, contract, chain_id, structure, created_at, updated_at FROM event_config WHERE id = $1
`

func (q *Queries) GetEventConfigByID(ctx context.Context, id uuid.UUID) (EventConfig, error) {
	row := q.db.QueryRowContext(ctx, getEventConfigByID, id)
	var i EventConfig
	err := row.Scan(
		&i.ID,
		&i.StartBlock,
		&i.Contract,
		&i.ChainID,
		&i.Structure,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEventConfig = `-- name: UpdateEventConfig :one
UPDATE event_config
SET start_block = $2, contract = $3, chain_id = $4, structure = $5, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, start_block, contract, chain_id, structure, created_at, updated_at
`

type UpdateEventConfigParams struct {
	ID         uuid.UUID      `json:"id"`
	StartBlock sql.NullInt32  `json:"start_block"`
	Contract   sql.NullString `json:"contract"`
	ChainID    sql.NullInt32  `json:"chain_id"`
	Structure  sql.NullString `json:"structure"`
}

func (q *Queries) UpdateEventConfig(ctx context.Context, arg UpdateEventConfigParams) (EventConfig, error) {
	row := q.db.QueryRowContext(ctx, updateEventConfig,
		arg.ID,
		arg.StartBlock,
		arg.Contract,
		arg.ChainID,
		arg.Structure,
	)
	var i EventConfig
	err := row.Scan(
		&i.ID,
		&i.StartBlock,
		&i.Contract,
		&i.ChainID,
		&i.Structure,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
