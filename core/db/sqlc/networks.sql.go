// Code generated by sqlc. DO NOT EDIT.
// source: networks.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createNetwork = `-- name: CreateNetwork :one
INSERT INTO networks (chain_id, rpc, name)
VALUES ($1, $2, $3)
RETURNING id, chain_id, rpc, name, created_at
`

type CreateNetworkParams struct {
	ChainID sql.NullInt32  `json:"chain_id"`
	Rpc     sql.NullString `json:"rpc"`
	Name    sql.NullString `json:"name"`
}

func (q *Queries) CreateNetwork(ctx context.Context, arg CreateNetworkParams) (Network, error) {
	row := q.db.QueryRowContext(ctx, createNetwork, arg.ChainID, arg.Rpc, arg.Name)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.Rpc,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNetwork = `-- name: DeleteNetwork :exec
DELETE FROM networks WHERE id = $1
`

func (q *Queries) DeleteNetwork(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteNetwork, id)
	return err
}

const getAllNetworks = `-- name: GetAllNetworks :many
SELECT id, chain_id, rpc, name, created_at FROM networks
`

func (q *Queries) GetAllNetworks(ctx context.Context) ([]Network, error) {
	rows, err := q.db.QueryContext(ctx, getAllNetworks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Network{}
	for rows.Next() {
		var i Network
		if err := rows.Scan(
			&i.ID,
			&i.ChainID,
			&i.Rpc,
			&i.Name,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNetworkByID = `-- name: GetNetworkByID :one
SELECT id, chain_id, rpc, name, created_at FROM networks WHERE id = $1
`

func (q *Queries) GetNetworkByID(ctx context.Context, id uuid.UUID) (Network, error) {
	row := q.db.QueryRowContext(ctx, getNetworkByID, id)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.Rpc,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}

const updateNetwork = `-- name: UpdateNetwork :one
UPDATE networks
SET chain_id = $2, rpc = $3, name = $4
WHERE id = $1
RETURNING id, chain_id, rpc, name, created_at
`

type UpdateNetworkParams struct {
	ID      uuid.UUID      `json:"id"`
	ChainID sql.NullInt32  `json:"chain_id"`
	Rpc     sql.NullString `json:"rpc"`
	Name    sql.NullString `json:"name"`
}

func (q *Queries) UpdateNetwork(ctx context.Context, arg UpdateNetworkParams) (Network, error) {
	row := q.db.QueryRowContext(ctx, updateNetwork,
		arg.ID,
		arg.ChainID,
		arg.Rpc,
		arg.Name,
	)
	var i Network
	err := row.Scan(
		&i.ID,
		&i.ChainID,
		&i.Rpc,
		&i.Name,
		&i.CreatedAt,
	)
	return i, err
}
