import {join} from "path";
import {importSchema} from "graphql-import"
const { makeExecutableSchema } = require('@graphql-tools/schema');
import {compile, JSONSchema} from 'json-schema-to-typescript'
import * as TJS from "typescript-json-schema";
import * as fs from "fs/promises";
import * as typescript from 'typescript';
import mongoose from "mongoose";
import {composeWithMongoose} from "graphql-compose-mongoose";

const schemaPath = join(__dirname, '../schema.graphql');
const typeDefs = importSchema(schemaPath);
const schema = makeExecutableSchema({ typeDefs });

// TODO: Get that "Approval" name reference dynamically
const typesArray = schema.getType('Approval')?.astNode?.fields.map((field: any) => {
    return {
        name: field?.name?.value,
        type: field?.type?.type?.name?.value || field?.type?.name?.value,
        isRequired: field.type?.kind === 'NonNullType'
    }
})

const customScalarsMapping: Record<string, any> = {
    Bytes: {
        type: 'string',
        "pattern": "^0x[0-9a-fA-F]{2}$"
    },
    BigInt: {
        type: 'string',
    }
}

const TSGeneratorSchema: JSONSchema = ({
    title: 'Approval',
    type: 'object',
    properties: typesArray.reduce((acc: any, curr: any) => {
        if (customScalarsMapping[curr.type]) {
            acc[curr.name] = customScalarsMapping[curr.type]
            return acc
        } else {
            acc[curr.name] = {
                type: curr.type,
            }
            return acc
        }
    }, {}),
    additionalProperties: false,
    required: typesArray.filter((field: any) => field.isRequired).map((field: any) => field.name),
})
// @ts-ignore
compile(
    TSGeneratorSchema,
    "Approval",
).then(async (ts: any) => {
    console.log(ts)
    // create Types Directory if doesn't exsist
    await fs.mkdir(join(__dirname, '../types'), { recursive: true })

    // Write TS to file
    await fs.writeFile(join(__dirname, '../types/generated.ts'), ts)

    const {Approval} = require('../types/generated.ts')
    const compilerOptions: typescript.CompilerOptions = {
        strictNullChecks: true,
    };
    const program = typescript.createProgram([join(__dirname, '../types/generated.ts')], compilerOptions);
    const schema = TJS.generateSchema(program as any, 'Approval', {
        required: true,
        excludePrivate: true,
    });

    const modelContent = `
/* eslint-disable */
/**
 * This file was automatically generated by EVMIndex.
 * DO NOT MODIFY IT. Instead, modify the grapqhl schema file,
 * and run the build command to regenerate this file again.
 */

import mongoose from "mongoose";
const schema = new mongoose.Schema(${JSON.stringify(schema?.properties)});
export const ApprovalModel = mongoose.model('Approval', schema);
`

    // create Types Directory if doesn't exsist
    await fs.mkdir(join(__dirname, '../db/models'), { recursive: true })

    // Write TS to file
    await fs.writeFile(join(__dirname, '../db/models/generated.ts'), modelContent)

})






