import * as typescript from "typescript";
import {join} from "path";
import * as TJS from "typescript-json-schema";
import fs from "fs/promises";
import console from "console";

export const generateModels = async (typeName: string) => {
    console.info("[‚è≥] Generating MongoDB Model for", typeName);

    const compilerOptions: typescript.CompilerOptions = {
        strictNullChecks: true,
        removeComments: true,
    };
    const program = typescript.createProgram([join(__dirname, '../types/generated.ts')], compilerOptions);
    const schema = TJS.generateSchema(program as any, typeName, {
        required: true,
        excludePrivate: true,
    });

    const modelContent = `
/* eslint-disable */
/**
 * This file was automatically generated by EVMIndex.
 * DO NOT MODIFY IT. Instead, modify the grapqhl schema file,
 * and run the build command to regenerate this file again.
 */

import mongoose from "mongoose";
const schema = new mongoose.Schema(${JSON.stringify(schema?.properties)});
export const ${typeName}Model = mongoose.model("${typeName}", schema);
`

    // create Types Directory if doesn't exsist
    await fs.mkdir(join(__dirname, '../db/models'), { recursive: true })

    // Write TS to file
    return  fs.writeFile(join(__dirname, `../db/models/${typeName}.ts`), modelContent)
}